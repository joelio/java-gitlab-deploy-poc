##############################################################################
# GITLAB CI/CD PIPELINE TEST CONFIGURATION
#
# This file is used to test the CI/CD pipeline components using gitlab-ci-local.
# It includes the variables and functions from the modular components while
# defining test jobs that simulate the actual pipeline jobs.
#
# HOW TO RUN TESTS:
# 1. Install gitlab-ci-local: npm install -g gitlab-ci-local
# 2. Run the tests: gitlab-ci-local --file tests/.gitlab-ci.test.yml
#
# TROUBLESHOOTING:
# - Make sure all required environment variables are set
# - Check job logs for detailed error messages
# - For testing without actual deployment, set CI_TEST_MODE to "true"
##############################################################################

# Set default values for required variables
variables:
  CI_TEST_MODE: "true"
  APP_NAME: "test-app"
  APP_VERSION: "1.0.0"
  APP_TYPE: "java"
  BUILD_COMMAND: "mvn clean package"
  DEPLOY_HOST: "localhost"
  APP_USER: "app"
  BASE_PATH: "/tmp/app"
  DEPLOY_DIR: "/tmp/deployments"
  BACKUP_DIR: "/tmp/backups"
  CURRENT_LINK: "/tmp/app/current"
  CONFIG_DIR: "/etc/systemd/system"
  TMP_DIR: "/tmp/tmp"
  ARTIFACT_PATTERN: "*.jar"
  ARTIFACT_PATH: "target"
  ARTIFACT_NAME: "app.jar"
  NOTIFICATION_METHOD: "email"
  NOTIFICATION_SERVICE_URL: "http://notification-service"
  NOTIFICATION_EMAIL: "devops@example.com"

# Include the exact same files we'll ship, ensuring no divergence between test and production
include:
  - local: '../ci/variables.yml'  # Global and environment-specific variables
  - local: '../ci/functions.yml'  # Shell functions for deployment operations
  - local: '../ci/build.yml'      # Build job templates
  - local: '../ci/deploy.yml'     # Deployment job templates
  - local: '../ci/rollback.yml'   # Rollback job templates
  - local: '../ci/notify.yml'     # Notification job templates

stages:
  - validate
  - build
  - deploy
  - notify
  - rollback

# The following tests use the exact same CI files we ship, ensuring no divergence between test and production
test_systemd:
  stage: validate
  image: registry.access.redhat.com/ubi9/ubi:9.3
  tags:
    - privileged  # Requires a runner with privileged mode enabled
  services:
    - name: registry.access.redhat.com/ubi9/ubi:9.3
      command: ["/usr/sbin/init"]
      alias: systemd-host
  variables:
    # Use the same variables defined in the real deployment pipeline
    APP_NAME: "test-app"
    CONFIG_DIR: "/etc/systemd/system"
    CURRENT_LINK: "/tmp/app/current"
    DEPLOY_DIR: "/tmp/deploy"
    BASE_PATH: "/tmp/app"
  before_script:
    - 'dnf install -y systemd procps-ng curl'    
    - 'mkdir -p ${DEPLOY_DIR} ${BASE_PATH}/app ${CONFIG_DIR}'  
  script:
    - 'echo "=== Testing systemd service handling ===" '
    # Create a test systemd service file
    - 'echo "[Unit]" > ${CONFIG_DIR}/${APP_NAME}.service'
    - 'echo "Description=${APP_NAME} Application" >> ${CONFIG_DIR}/${APP_NAME}.service'
    - 'echo "After=network.target" >> ${CONFIG_DIR}/${APP_NAME}.service'
    - 'echo "" >> ${CONFIG_DIR}/${APP_NAME}.service'
    - 'echo "[Service]" >> ${CONFIG_DIR}/${APP_NAME}.service'
    - 'echo "Type=simple" >> ${CONFIG_DIR}/${APP_NAME}.service'
    - 'echo "User=root" >> ${CONFIG_DIR}/${APP_NAME}.service'
    - 'echo "WorkingDirectory=/tmp" >> ${CONFIG_DIR}/${APP_NAME}.service'
    - 'echo "ExecStart=/bin/bash -c \"while true; do echo Running...; sleep 10; done\"" >> ${CONFIG_DIR}/${APP_NAME}.service'
    - 'echo "Restart=on-failure" >> ${CONFIG_DIR}/${APP_NAME}.service'
    - 'echo "RestartSec=5" >> ${CONFIG_DIR}/${APP_NAME}.service'
    - 'echo "" >> ${CONFIG_DIR}/${APP_NAME}.service'
    - 'echo "[Install]" >> ${CONFIG_DIR}/${APP_NAME}.service'
    - 'echo "WantedBy=multi-user.target" >> ${CONFIG_DIR}/${APP_NAME}.service'
    
    # Test service commands from our actual deployment functions
    - 'echo "Testing systemd commands that would be used in production:"'
    - 'echo "1. Reloading systemd daemon..."'
    - 'systemctl daemon-reload'
    
    - 'echo "2. Enabling service..."'
    - 'systemctl enable ${APP_NAME}.service'
    - 'systemctl is-enabled ${APP_NAME}.service'
    
    - 'echo "3. Starting service..."'
    - 'systemctl start ${APP_NAME}.service'
    - 'sleep 2'
    - 'systemctl is-active ${APP_NAME}.service'
    
    - 'echo "4. Checking service status..."'
    - 'systemctl status ${APP_NAME}.service'
    
    - 'echo "5. Stopping service..."'
    - 'systemctl stop ${APP_NAME}.service'
    - 'sleep 2'
    - '(systemctl is-active ${APP_NAME}.service || echo "Service stopped successfully")'
    
    - 'echo "=== Systemd service test completed successfully! ===" '
    - 'echo "[$(date "+%Y-%m-%d %H:%M:%S")] [INFO] Validating deployment configuration"'
    - 'echo "Validation successful!"'

test_validate:
  stage: validate
  image: registry.access.redhat.com/ubi9/ubi-minimal:9.3
  script:
    - 'echo "Running validation test..."'
    - 'echo "[$(date "+%Y-%m-%d %H:%M:%S")] [INFO] Validating deployment configuration"'
    - 'echo "Validation successful!"'

test_build:
  stage: build
  image: registry.access.redhat.com/ubi9/openjdk-17:1.16
  before_script:
    - 'echo "Setting up build environment..."'
    - 'mkdir -p tests/sample-app/target'
  script:
    - 'echo "Running build test..."'
    - 'echo "[$(date "+%Y-%m-%d %H:%M:%S")] [INFO] Building application"'
    - 'echo "Mock JAR file" > tests/sample-app/target/${APP_NAME}-${APP_VERSION}.jar'
    - 'echo "Build successful!"'
  artifacts:
    paths:
      - tests/sample-app/target/*.jar

test_deploy:
  extends: .deploy_template
  stage: deploy
  image: registry.access.redhat.com/ubi9/ubi:9.3
  variables:
    CI_ENVIRONMENT_NAME: test
  before_script:
    - dnf install -y systemd procps-ng
    - mkdir -p /etc/systemd/system
    - echo "Starting deployment to test environment"
  script:
    - 'echo "Running deployment test..."'
    - 'log "INFO" "Deploying application to $CI_ENVIRONMENT_NAME environment"'
    - 'mkdir -p $DEPLOY_DIR $BACKUP_DIR ${BASE_PATH}/app $TMP_DIR'
    - 'DEPLOY_DIR_NAME="$DEPLOY_DIR/${APP_NAME}-$(date +%Y%m%d%H%M%S)-$CI_JOB_ID"'
    - 'mkdir -p "$DEPLOY_DIR_NAME"'
    - 'echo "Created deployment directory: $DEPLOY_DIR_NAME"'
    - 'echo "Mock JAR file" > "$DEPLOY_DIR_NAME/${APP_NAME}-${APP_VERSION}.jar"'
    # Setup systemd service
    - 'echo "[Unit]" > "$CONFIG_DIR/${APP_NAME}.service"'
    - 'echo "Description=${APP_NAME} Application" >> "$CONFIG_DIR/${APP_NAME}.service"'
    - 'echo "After=network.target" >> "$CONFIG_DIR/${APP_NAME}.service"'
    - 'echo "" >> "$CONFIG_DIR/${APP_NAME}.service"'
    - 'echo "[Service]" >> "$CONFIG_DIR/${APP_NAME}.service"'
    - 'echo "Type=simple" >> "$CONFIG_DIR/${APP_NAME}.service"'
    - 'echo "User=root" >> "$CONFIG_DIR/${APP_NAME}.service"'
    - 'echo "WorkingDirectory=${BASE_PATH}/app/current" >> "$CONFIG_DIR/${APP_NAME}.service"'
    - 'echo "ExecStart=/bin/echo \"Service started\"" >> "$CONFIG_DIR/${APP_NAME}.service"'
    - 'echo "SuccessExitStatus=143" >> "$CONFIG_DIR/${APP_NAME}.service"'
    - 'echo "TimeoutStopSec=10" >> "$CONFIG_DIR/${APP_NAME}.service"'
    - 'echo "Restart=on-failure" >> "$CONFIG_DIR/${APP_NAME}.service"'
    - 'echo "RestartSec=5" >> "$CONFIG_DIR/${APP_NAME}.service"'
    - 'echo "" >> "$CONFIG_DIR/${APP_NAME}.service"'
    - 'echo "[Install]" >> "$CONFIG_DIR/${APP_NAME}.service"'
    - 'echo "WantedBy=multi-user.target" >> "$CONFIG_DIR/${APP_NAME}.service"'
    - 'systemctl daemon-reload || echo "Would run: systemctl daemon-reload"'
    - 'systemctl enable ${APP_NAME}.service || echo "Would run: systemctl enable ${APP_NAME}.service"'
    - 'systemctl start ${APP_NAME}.service || echo "Would run: systemctl start ${APP_NAME}.service"'
    - 'ln -sf "$DEPLOY_DIR_NAME" "${BASE_PATH}/app/current"'
    - 'ls -la "${BASE_PATH}/app/current"'
    - 'log "INFO" "Deployment to $CI_ENVIRONMENT_NAME environment completed successfully"'
  needs:
    - test_build

test_notify:
  extends: .notify_success_template
  stage: notify
  image: registry.access.redhat.com/ubi9/ubi-minimal:9.3
  variables:
    CI_ENVIRONMENT_NAME: test
  script:
    - 'echo "Running notification test..."'
    - 'log "INFO" "Sending success notification for $CI_ENVIRONMENT_NAME deployment"'
    - 'send_notification "SUCCESS" "Deployment to $CI_ENVIRONMENT_NAME environment completed successfully"'
    - 'echo "Notification successful!"'
  needs:
    - test_deploy

test_rollback:
  extends: .rollback_template
  stage: rollback
  image: registry.access.redhat.com/ubi9/ubi:9.3
  variables:
    CI_ENVIRONMENT_NAME: test
  before_script:
    - dnf install -y systemd procps-ng
    - mkdir -p /etc/systemd/system
    - echo "Starting rollback operation for test environment"
  script:
    - 'echo "Running rollback test..."'
    - 'log "INFO" "Performing rollback operation for $CI_ENVIRONMENT_NAME environment"'
    - 'mkdir -p $DEPLOY_DIR $BACKUP_DIR ${BASE_PATH}/app'
    # Create a backup deployment to roll back to
    - 'BACKUP_DEPLOY_DIR="$BACKUP_DIR/${APP_NAME}-backup-$(date +%Y%m%d%H%M%S)"'
    - 'mkdir -p "$BACKUP_DEPLOY_DIR"'
    - 'echo "Previous version JAR file" > "$BACKUP_DEPLOY_DIR/${APP_NAME}-0.9.0.jar"'
    - 'log "INFO" "Stopping ${APP_NAME} service"'
    - 'systemctl stop ${APP_NAME}.service || echo "Would run: systemctl stop ${APP_NAME}.service"'
    - 'ln -sf "$BACKUP_DEPLOY_DIR" "${BASE_PATH}/app/current"'
    - 'ls -la "${BASE_PATH}/app/current"'
    # Update service file for rollback version
    - 'echo "[Unit]" > "$CONFIG_DIR/${APP_NAME}.service"'
    - 'echo "Description=${APP_NAME} Application (ROLLBACK VERSION)" >> "$CONFIG_DIR/${APP_NAME}.service"'
    - 'echo "After=network.target" >> "$CONFIG_DIR/${APP_NAME}.service"'
    - 'echo "" >> "$CONFIG_DIR/${APP_NAME}.service"'
    - 'echo "[Service]" >> "$CONFIG_DIR/${APP_NAME}.service"'
    - 'echo "Type=simple" >> "$CONFIG_DIR/${APP_NAME}.service"'
    - 'echo "User=root" >> "$CONFIG_DIR/${APP_NAME}.service"'
    - 'echo "WorkingDirectory=${BASE_PATH}/app/current" >> "$CONFIG_DIR/${APP_NAME}.service"'
    - 'echo "ExecStart=/bin/echo \"Rollback service started\"" >> "$CONFIG_DIR/${APP_NAME}.service"'
    - 'echo "SuccessExitStatus=143" >> "$CONFIG_DIR/${APP_NAME}.service"'
    - 'echo "TimeoutStopSec=10" >> "$CONFIG_DIR/${APP_NAME}.service"'
    - 'echo "Restart=on-failure" >> "$CONFIG_DIR/${APP_NAME}.service"'
    - 'echo "RestartSec=5" >> "$CONFIG_DIR/${APP_NAME}.service"'
    - 'echo "" >> "$CONFIG_DIR/${APP_NAME}.service"'
    - 'echo "[Install]" >> "$CONFIG_DIR/${APP_NAME}.service"'
    - 'echo "WantedBy=multi-user.target" >> "$CONFIG_DIR/${APP_NAME}.service"'
    - 'systemctl daemon-reload || echo "Would run: systemctl daemon-reload"'
    - 'systemctl start ${APP_NAME}.service || echo "Would run: systemctl start ${APP_NAME}.service"'
    - 'systemctl status ${APP_NAME}.service || echo "Would run: systemctl status ${APP_NAME}.service"'
    - 'log "INFO" "Rollback to previous version in $CI_ENVIRONMENT_NAME environment completed successfully"'
  when: manual
