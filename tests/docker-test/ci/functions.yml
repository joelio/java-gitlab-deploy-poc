##############################################################################
# DEPLOYMENT FUNCTIONS
#
# This file defines all shell functions used throughout the CI/CD pipeline for
# deployment operations. These functions handle SSH connections, file transfers,
# service management, and deployment validation.
#
# KEY FEATURES:
# - Comprehensive error handling and validation for all operations
# - Detailed logging with timestamps and log levels
# - Test mode support to simulate operations without making changes
# - Fallback mechanisms for critical operations
#
# HOW TO USE:
# 1. These functions are referenced in other CI files using the YAML anchor syntax
# 2. Each function returns a non-zero exit code on failure for proper error handling
# 3. For testing without making actual changes, set CI_TEST_MODE to "true"
#
# CUSTOMIZATION:
# - Add new functions as needed for your specific deployment requirements
# - Modify existing functions to match your infrastructure setup
##############################################################################

.functions: &functions |
  # Common utility functions for deployment
  
  # Log function with timestamp and log level
  function log() {
    local level=$1
    local message=$2
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [$level] $message"
  }
  
  # Function to deploy to multiple servers
  function deploy_to_servers() {
    local deploy_function=$1
    shift
    
    # Check if multi-server deployment is enabled
    if [ "$MULTI_SERVER_DEPLOYMENT" == "true" ]; then
      log "INFO" "Multi-server deployment mode enabled"
      
      # Parse the JSON array of servers
      # Remove brackets, quotes, and split by commas
      local servers_str=${DEPLOY_HOSTS//[\[\]\"]/}
      IFS=',' read -ra SERVER_ARRAY <<< "$servers_str"
      
      if [ ${#SERVER_ARRAY[@]} -eq 0 ]; then
        log "ERROR" "No servers defined in DEPLOY_HOSTS array"
        return 1
      fi
      
      log "INFO" "Will deploy to ${#SERVER_ARRAY[@]} servers sequentially"
      
      # Deploy to each server sequentially
      for server in "${SERVER_ARRAY[@]}"; do
        # Trim whitespace
        server=$(echo "$server" | xargs)
        
        log "INFO" "Deploying to server: $server"
        local original_host=$DEPLOY_HOST
        DEPLOY_HOST=$server
        
        # Call the specified deployment function with all arguments
        "$deploy_function" "$@"
        local exit_code=$?
        
        # Restore original host
        DEPLOY_HOST=$original_host
        
        if [ $exit_code -ne 0 ]; then
          log "ERROR" "Deployment failed on server: $server"
          return $exit_code
        fi
        
        log "INFO" "Successfully deployed to server: $server"
      done
      
      log "INFO" "Multi-server deployment completed successfully"
      return 0
    else
      # Single server mode - just call the function directly
      log "INFO" "Single server deployment mode"
      "$deploy_function" "$@"
      return $?
    fi
  }
  
  # Error handling function
  function handle_error() {
    local exit_code=$1
    local error_message=$2
    if [ $exit_code -ne 0 ]; then
      log "ERROR" "$error_message (Exit code: $exit_code)"
      return 1
    fi
    return 0
  }
  
  # Test mode check function
  function is_test_mode() {
    if [ "$CI_TEST_MODE" == "true" ]; then
      log "INFO" "Running in TEST MODE - no actual changes will be made"
      return 0
    fi
    return 1
  }
  
  # SSH command wrapper function with error handling
  function ssh_cmd() {
    if is_test_mode; then
      log "TEST" "Would execute SSH command: $@"
      return 0
    fi
    
    log "DEBUG" "Executing SSH command on ${APP_USER}@${DEPLOY_HOST}"
    local output
    output=$(sshpass $sshpass ssh -o ConnectTimeout=10 ${APP_USER}@$DEPLOY_HOST "$@" 2>&1)
    local exit_code=$?
    
    if [ $exit_code -ne 0 ]; then
      log "ERROR" "SSH command failed: $@"
      log "ERROR" "Output: $output"
      return $exit_code
    fi
    
    echo "$output"
    return 0
  }
  
  # SCP command wrapper function with error handling
  function scp_cmd() {
    if is_test_mode; then
      log "TEST" "Would execute SCP command: $1 to ${APP_USER}@${DEPLOY_HOST}:$2"
      return 0
    fi
    
    log "DEBUG" "Copying $1 to ${APP_USER}@${DEPLOY_HOST}:$2"
    sshpass $sshpass scp -o ConnectTimeout=10 "$1" ${APP_USER}@$DEPLOY_HOST:"$2"
    local exit_code=$?
    
    if [ $exit_code -ne 0 ]; then
      log "ERROR" "SCP command failed: $1 to $2"
      return $exit_code
    fi
    
    return 0
  }
  
  # Root SSH command wrapper function with error handling
  function ssh_root_cmd() {
    if is_test_mode; then
      log "TEST" "Would execute ROOT SSH command: $@"
      return 0
    fi
    
    log "DEBUG" "Executing ROOT SSH command on ${DEPLOY_HOST}"
    local output
    output=$(sshpass $sshpass ssh -o ConnectTimeout=10 root@$DEPLOY_HOST "$@" 2>&1)
    local exit_code=$?
    
    if [ $exit_code -ne 0 ]; then
      log "ERROR" "ROOT SSH command failed: $@"
      log "ERROR" "Output: $output"
      return $exit_code
    fi
    
    echo "$output"
    return 0
  }
  
  # Create required directories with validation
  function create_directories() {
    log "INFO" "Creating required directories on ${DEPLOY_HOST}"
    ssh_cmd "mkdir -p $DEPLOY_DIR $BACKUP_DIR ${BASE_PATH}/app $TMP_DIR $CONFIG_DIR"
    local exit_code=$?
    
    # Verify directories were created
    if [ $exit_code -eq 0 ]; then
      log "INFO" "Successfully created directories"
      return 0
    else
      log "ERROR" "Failed to create required directories"
      return $exit_code
    fi
  }
  
  # Backup current deployment with timestamp
  function backup_current_deployment() {
    log "INFO" "Checking for existing deployment to backup"
    
    if ssh_cmd "test -L $CURRENT_LINK"; then
      CURRENT_TARGET=$(ssh_cmd "readlink -f $CURRENT_LINK")
      BACKUP_NAME="backup-$(date +%Y%m%d%H%M%S)-$CI_JOB_ID"
      log "INFO" "Backing up current deployment to $BACKUP_DIR/$BACKUP_NAME"
      
      ssh_cmd "cp -r $CURRENT_TARGET $BACKUP_DIR/$BACKUP_NAME"
      local exit_code=$?
      
      if [ $exit_code -eq 0 ]; then
        log "INFO" "Backup completed successfully"
        return 0
      else
        log "ERROR" "Backup failed"
        return $exit_code
      fi
    else
      log "INFO" "No current deployment found to backup"
      return 0
    fi
  }
  
  # Clean up old backups based on retention policy
  function cleanup_old_backups() {
    log "INFO" "Cleaning up old backups (keeping $MAX_BACKUPS)"
    
    # First check if there are any backups to clean
    local backup_count
    backup_count=$(ssh_cmd "ls -1 $BACKUP_DIR | wc -l")
    
    if [ "$backup_count" -le "$MAX_BACKUPS" ]; then
      log "INFO" "Only $backup_count backups exist, no cleanup needed"
      return 0
    fi
    
    # Delete old backups
    ssh_cmd "ls -1t $BACKUP_DIR | tail -n +$((MAX_BACKUPS+1)) | xargs -I {} rm -rf $BACKUP_DIR/{}"
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
      log "INFO" "Successfully cleaned up old backups"
      return 0
    else
      log "WARN" "Failed to clean up old backups, but continuing deployment"
      return 0  # Non-critical error, continue deployment
    fi
  }
  
  # Create new deployment directory with standardized naming
  function create_deployment_dir() {
    log "INFO" "Creating new deployment directory"
    NEW_DEPLOY_DIR="$DEPLOY_DIR/${APP_NAME}-${CI_JOB_ID}"
    
    # Check if directory already exists
    if ssh_cmd "test -d $NEW_DEPLOY_DIR"; then
      log "WARN" "Deployment directory already exists, removing it"
      ssh_cmd "rm -rf $NEW_DEPLOY_DIR"
    fi
    
    ssh_cmd "mkdir -p $NEW_DEPLOY_DIR"
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
      log "INFO" "Created deployment directory: $NEW_DEPLOY_DIR"
      echo $NEW_DEPLOY_DIR
      return 0
    else
      log "ERROR" "Failed to create deployment directory"
      return $exit_code
    fi
  }
  
  # Upload application artifacts with validation
  function upload_application() {
    local deploy_dir=$1
    
    if [ -z "$deploy_dir" ]; then
      log "ERROR" "No deployment directory specified"
      return 1
    fi
    
    log "INFO" "Uploading application artifacts to $deploy_dir"
    
    # Check if artifact pattern contains wildcard (for single file or directory upload)
    if [[ "$ARTIFACT_PATTERN" == *"*"* ]]; then
      # For wildcard patterns, we need to find the matching files
      local matching_files=($(ls $ARTIFACT_PATTERN 2>/dev/null))
      
      if [ ${#matching_files[@]} -eq 0 ]; then
        log "ERROR" "No artifacts found matching pattern: $ARTIFACT_PATTERN"
        return 1
      fi
      
      # Upload single file directly if only one match
      if [ ${#matching_files[@]} -eq 1 ]; then
        log "INFO" "Uploading single artifact file: ${matching_files[0]}"
        scp_cmd "${matching_files[0]}" "$TMP_DIR/$ARTIFACT_NAME"
        local exit_code=$?
        
        if [ $exit_code -ne 0 ]; then
          log "ERROR" "Failed to upload artifact file"
          return $exit_code
        fi
        
        # Move file to deployment directory
        ssh_cmd "mv $TMP_DIR/$ARTIFACT_NAME $deploy_dir/"
        exit_code=$?
        
        if [ $exit_code -eq 0 ]; then
          log "INFO" "Successfully uploaded artifact to $deploy_dir/$ARTIFACT_NAME"
          return 0
        else
          log "ERROR" "Failed to move artifact to deployment directory"
          return $exit_code
        fi
      else
        # Multiple files or directory - create archive
        log "INFO" "Creating archive of multiple artifacts"
        local artifact_dir=$(dirname "${matching_files[0]}")
        local archive_name="${APP_NAME}-${CI_JOB_ID}.tar.gz"
        
        tar -czf "$archive_name" -C "$artifact_dir" .
        
        # Upload archive
        scp_cmd "$archive_name" "$TMP_DIR/"
        local exit_code=$?
        
        if [ $exit_code -ne 0 ]; then
          log "ERROR" "Failed to upload artifact archive"
          return $exit_code
        fi
        
        # Extract archive to deployment directory
        ssh_cmd "tar -xzf $TMP_DIR/$archive_name -C $deploy_dir"
        exit_code=$?
        
        if [ $exit_code -eq 0 ]; then
          log "INFO" "Successfully extracted artifacts to $deploy_dir"
          # Clean up
          ssh_cmd "rm $TMP_DIR/$archive_name"
          rm "$archive_name"
          return 0
        else
          log "ERROR" "Failed to extract artifacts to deployment directory"
          return $exit_code
        fi
      fi
    else
      # Direct file path - upload directly
      if [ ! -f "$ARTIFACT_PATH" ]; then
        log "ERROR" "Artifact not found at path: $ARTIFACT_PATH"
        return 1
      fi
      
      # Upload artifact to temp directory first
      scp_cmd "$ARTIFACT_PATH" "$TMP_DIR/$ARTIFACT_NAME"
      local exit_code=$?
      
      if [ $exit_code -ne 0 ]; then
        log "ERROR" "Failed to upload artifact"
        return $exit_code
      fi
      
      # Move artifact to deployment directory
      ssh_cmd "mv $TMP_DIR/$ARTIFACT_NAME $deploy_dir/"
      exit_code=$?
      
      if [ $exit_code -eq 0 ]; then
        log "INFO" "Successfully uploaded artifact to $deploy_dir/$ARTIFACT_NAME"
        return 0
      else
        log "ERROR" "Failed to move artifact to deployment directory"
        return $exit_code
      fi
    fi
  }
  
  # Create and upload systemd service file with configurable settings
  function setup_systemd_service() {
    log "INFO" "Setting up systemd service file for ${APP_NAME}"
    
    # Parse environment variables from SERVICE_ENV_VARS
    local env_vars=""
    IFS=',' read -ra ENV_ARRAY <<< "$SERVICE_ENV_VARS"
    for env_var in "${ENV_ARRAY[@]}"; do
      env_vars+="    Environment=\"$env_var\"\n"
    done
    
    # Create a generic systemd service file using the configured variables
    cat > ${APP_NAME}.service << EOF
    [Unit]
    Description=${APP_NAME} Application
    After=network.target
    
    [Service]
    Type=simple
    User=${APP_USER}
    WorkingDirectory=${WORKING_DIRECTORY}
    ExecStart=${START_COMMAND}
${env_vars}
    SuccessExitStatus=143
    TimeoutStopSec=10
    Restart=on-failure
    RestartSec=5
    
    [Install]
    WantedBy=default.target
    EOF
    
    # Create config directory if it doesn't exist
    ssh_cmd "mkdir -p $CONFIG_DIR"
    
    # Upload service file
    scp_cmd "${APP_NAME}.service" "$CONFIG_DIR/"
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
      log "INFO" "Successfully uploaded systemd service file"
      return 0
    else
      log "ERROR" "Failed to upload systemd service file"
      return $exit_code
    fi
  }
  
  # Stop the service with timeout
  function stop_service() {
    log "INFO" "Stopping ${APP_NAME} service"
    
    # Check if service is running before attempting to stop
    if ssh_cmd "systemctl --user is-active ${APP_NAME}.service" > /dev/null 2>&1; then
      ssh_cmd "systemctl --user stop ${APP_NAME}.service"
      local exit_code=$?
      
      if [ $exit_code -eq 0 ]; then
        log "INFO" "Service stopped successfully"
      else
        log "WARN" "Service failed to stop gracefully, continuing anyway"
      fi
    else
      log "INFO" "Service is not running, no need to stop"
    fi
    
    return 0  # Always continue deployment even if service stop fails
  }
  
  # Update symlink to new deployment with validation
  function update_symlink() {
    local target_dir=$1
    
    if [ -z "$target_dir" ]; then
      log "ERROR" "No target directory specified for symlink"
      return 1
    fi
    
    log "INFO" "Updating symlink to point to $target_dir"
    
    # Verify target directory exists before creating symlink
    if ! ssh_cmd "test -d $target_dir"; then
      log "ERROR" "Target directory $target_dir does not exist"
      return 1
    fi
    
    ssh_cmd "ln -sfn $target_dir $CURRENT_LINK"
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
      log "INFO" "Successfully updated symlink"
      return 0
    else
      log "ERROR" "Failed to update symlink"
      return $exit_code
    fi
  }
  
  # Enable linger for user service persistence
  function enable_linger() {
    log "INFO" "Enabling linger for ${APP_USER}"
    
    # Check if linger is already enabled
    if ssh_root_cmd "loginctl show-user ${APP_USER} | grep -q 'Linger=yes'"; then
      log "INFO" "Linger already enabled for ${APP_USER}"
      return 0
    fi
    
    ssh_root_cmd "loginctl enable-linger ${APP_USER}"
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
      log "INFO" "Successfully enabled linger"
      return 0
    else
      log "ERROR" "Failed to enable linger"
      return $exit_code
    fi
  }
  
  # Start the service with proper validation
  function start_service() {
    log "INFO" "Starting ${APP_NAME} service"
    
    # Reload systemd daemon first
    ssh_cmd "systemctl --user daemon-reload"
    
    # Enable and start service
    ssh_cmd "systemctl --user enable ${APP_NAME}.service && systemctl --user start ${APP_NAME}.service"
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
      log "INFO" "Service started successfully"
      return 0
    else
      log "ERROR" "Failed to start service"
      return $exit_code
    fi
  }
  
  # Perform health check with detailed logging
  function perform_health_check() {
    log "INFO" "Performing health check (${HEALTH_CHECK_RETRIES} attempts with ${HEALTH_CHECK_DELAY}s delay)"
    
    for i in $(seq 1 $HEALTH_CHECK_RETRIES); do
      log "INFO" "Health check attempt $i of $HEALTH_CHECK_RETRIES..."
      
      if ssh_cmd "curl -s -f $HEALTH_CHECK_URL"; then
        log "INFO" "Health check passed!"
        
        # Store current deployment ID as the last successful one
        ssh_cmd "echo $CI_JOB_ID > ${BASE_PATH}/app/last_successful_deploy"
        return 0
      fi
      
      log "WARN" "Health check attempt $i failed, waiting ${HEALTH_CHECK_DELAY}s before next attempt"
      sleep $HEALTH_CHECK_DELAY
    done
    
    # If we get here, health check failed
    log "ERROR" "Health check failed after $HEALTH_CHECK_RETRIES attempts"
    return 1
  }
  
  # Get last successful deployment with validation
  function get_last_successful_deploy() {
    log "INFO" "Retrieving last successful deployment ID"
    
    # Check if the file exists
    if ! ssh_cmd "test -f ${BASE_PATH}/app/last_successful_deploy"; then
      log "WARN" "No record of last successful deployment"
      return 0
    fi
    
    LAST_DEPLOY_ID=$(ssh_cmd "cat ${BASE_PATH}/app/last_successful_deploy || echo ''")
    
    if [ -n "$LAST_DEPLOY_ID" ]; then
      log "INFO" "Last successful deployment: $LAST_DEPLOY_ID"
    else
      log "WARN" "Last successful deployment file exists but is empty"
    fi
    
    echo $LAST_DEPLOY_ID
    return 0
  }
  
  # Get latest backup with validation
  function get_latest_backup() {
    log "INFO" "Finding latest backup"
    
    # Check if backup directory exists and has backups
    if ! ssh_cmd "test -d $BACKUP_DIR && ls -1 $BACKUP_DIR | grep -q ."; then
      log "WARN" "No backups found in $BACKUP_DIR"
      return 0
    fi
    
    LATEST_BACKUP=$(ssh_cmd "ls -1t $BACKUP_DIR | head -n 1")
    
    if [ -n "$LATEST_BACKUP" ]; then
      log "INFO" "Latest backup: $LATEST_BACKUP"
    else
      log "WARN" "Failed to determine latest backup"
    fi
    
    echo $LATEST_BACKUP
    return 0
  }
  
  # Send notification with improved error handling
  function send_notification() {
    local status=$1
    local message=$2
    
    if [ -z "$status" ] || [ -z "$message" ]; then
      log "ERROR" "Notification status or message not provided"
      return 1
    fi
    
    log "INFO" "Sending $NOTIFICATION_METHOD notification: [$status] $message"
    
    if [ "$NOTIFICATION_METHOD" == "email" ]; then
      if [ -z "$NOTIFICATION_EMAIL" ]; then
        log "ERROR" "NOTIFICATION_EMAIL not set"
        return 1
      fi
      
      echo "$message" | mail -s "[$status] $APP_NAME Deployment to $CI_ENVIRONMENT_NAME" $NOTIFICATION_EMAIL
      local exit_code=$?
      
      if [ $exit_code -ne 0 ]; then
        log "WARN" "Failed to send email notification"
      fi
    elif [ "$NOTIFICATION_METHOD" == "notification_service" ]; then
      if [ -z "$NOTIFICATION_SERVICE_URL" ]; then
        log "WARN" "NOTIFICATION_SERVICE_URL not set. Skipping Notification Service notification."
        return 0
      fi
      
      # Set emoji based on status
      if [ "$status" == "SUCCESS" ]; then
        emoji=":white_check_mark:"
      elif [ "$status" == "FAILURE" ]; then
        emoji=":x:"
      else
        emoji=":information_source:"
      fi
      
      # Send to Notification Service webhook
      curl -s -X POST -H 'Content-type: application/json' --data "{\"text\":\"$emoji $message\"}" $NOTIFICATION_SERVICE_URL
      if [ $? -ne 0 ]; then
        log "WARN" "Failed to send Notification Service notification"
      fi
    else
      log "WARN" "Notification method $NOTIFICATION_METHOD not configured. Defaulting to console output."
      echo "$message"
    fi
    
    return 0  # Non-critical function, always return success
  }
